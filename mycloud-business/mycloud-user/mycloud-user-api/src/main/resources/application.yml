server:
  port: ${SERVER_PORT}

spring:
  jackson:
    default-property-inclusion: non_null
  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${MYSQL_URL_MASTER}
    username: ${MYSQL_USERNAME_MASTER}
    password: ${MYSQL_PASSWORD_MASTER}
    hikari:
      connection-timeout: 3000
      idle-timeout: 100000
      maximum-pool-size: 30
      minimum-idle: 10
  cache:
    type: generic
  redis:
    #database: 0 # Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0
    host: ${REDIS_HOST}
    password: ${REDIS_PASSWORD}
    port: ${REDIS_PORT}
    timeout: 3000 # 连接超时时间（毫秒）
  cloud:
    sentinel:
      enabled: true #是否开启，默认true
      eager: true #是否饥饿加载，默认false
      transport:
        dashboard: ${SENTINEL_DASHBOARD} #sentinel控制台地址
      filter:
        url-patterns: /** #拦截请求地址
      # Sentinel 规则的数据源，是一个 Map 类型。key 为数据源名，可自定义；value 为数据源的具体配置
      datasource:
        ds1:
          # 对应 DataSourcePropertiesConfiguration 类
          nacos:
            server-addr: ${SENTINEL_NACOS_SERVER} # Nacos 服务器地址
            namespace: ${SENTINEL_NACOS_NAMESPACE} # Nacos 命名空间
            data-id: ${spring.application.name}-flow-rule # Nacos 配置集编号
            data-type: json # 数据格式
            rule-type: FLOW # 规则类型
    stream:
      function:
          definition: producer
      bindings:
        producer-out-0:
          destination: SELF_TEST_TOPIC
        user-out-0:
          destination: USER_TOPIC
        sms-out-0:
          destination: SMS_TOPIC
      rocketmq:
        binder:
          name-server: ${ROCKETMQ_NAMESERVER}
          group: mycloud
        bindings:
          user-out-0:
            producer:
              producerType: normal # 普通消息（Normal） 事物消息（Trans）
              sendType: Sync # 同步消息（Sync） 异步消息（Async） 单向消息（Oneway）
#             group: user-producer-group # 同一类 Producer 的集合，这类 Producer 发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则 Broker 服务器会联系同一生产者组的其他生产者实例以提交或回溯消费


dubbo:
  #指定Dubbo服务实现类的扫描基准包
  scan:
    base-packages: com.pueeo.user.service
  #协议配置
  protocol:
    name: dubbo
    port: -1 #协议端口，-1表示自增端口，从20880开始
  #注册中心配置
  registry:
    address: spring-cloud://${DUBBO_REGISTRY_ADDRESS}
  cloud:
    subscribed-services: '' #设置订阅的应用列表，默认为* 订阅所有应用, ''则不订阅
  consumer:
    check: false #为false表示启动时不检查是否有消费者
    filter: userContextConsumerFilter
  #自定义filter
  provider:
    filter: dubboExceptionFilter,-exception,userContextProviderFilter #使用自定义Filter，禁用默认的ExceptionFilter

mybatis-plus:
  mapper-locations: classpath*:mapper/*.xml
  typeAliasesPackage: com.pueeo.user.entity
  global-config:
    db-config:
      logic-delete-field: isDeleted  #全局逻辑删除字段值 3.3.0开始支持
      logic-delete-value: true # 逻辑已删除值(默认为 1)
      logic-not-delete-value: false # 逻辑未删除值(默认为 0)
  configuration:
    map-underscore-to-camel-case: true

#二级缓存
j2cache:
  # j2cache配置文件位置（默认/j2cache-dev.properties）
  config-location: classpath:/j2cache/j2cache-${spring.profiles.active}.properties
  # 是否启用Spring Cache（默认false）
  open-spring-cache: true
  # 设置Spring Cache是否允许缓存null值（默认false）
  allow-null-values: true
  # 是否开启2级缓存（默认true）
  l2-cache-open: true
  # redis客户端类型（jedis | lettuce（默认））
  redis-client: lettuce
  # 缓存清除模式
  # active:主动清除，二级缓存过期主动通知各节点清除，优点在于所有节点可以同时收到缓存清除
  # passive:被动清除（默认），一级缓存过期进行通知各节点清除一二级缓存
  # blend:两种模式一起运作，对于各个节点缓存准确性以及及时性要求高的可以使用（推荐使用前面两种模式中一种）
  cache-clean-mode: active
  # 二级缓存序列化格式（fst（推荐） | kryo | json | fastjson | java（默认） | fse | 自定义classname）
  j2CacheConfig:
    serialization: fastjson


#线程池配置
thread-pool:
  common:
    core-pool-size: 10
    max-pool-size: 20
    queue-capacity: 100
    keep-alive-seconds: 60